class Matriz {
    private int[][] box;

    public Matriz() {
        box = new int[3][3];
    }

    // Obtener el valor de una celda
    public int get(int fila, int columna) {
        return box[fila][columna];
    }

    // Establecer el valor de una celda
    public void set(int fila, int columna, int valor) {
        box[fila][columna] = valor;
    }

    // Comprobar si el cuadro está completo
    public boolean estaCompleto() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (box[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
}
/// clase Sudoku
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.util.Random;

public class Sudoku {
    // Atributos del Sudoku
    private int[][] tablero;  // Tablero de Sudoku
    private StringBuilder registroMovimientos;  // Registro de los movimientos realizados

    // Constructor para inicializar el tablero vacío
    public Sudoku() {
        tablero = new int[9][9];
        registroMovimientos = new StringBuilder();
    }

    // Método para mostrar el tablero en pantalla
    public void mostrarTablero() {
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("------+-------+------");
            }
            for (int j = 0; j < 9; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                System.out.print(tablero[i][j] == 0 ? ". " : tablero[i][j] + " ");
            }
            System.out.println();
        }
    }

    // Método para llenar el tablero con una cantidad aleatoria de números
    public void llenarTableroAleatoriamente(int cantidad) {
        Random rand = new Random();
        int llenadas = 0;
        while (llenadas < cantidad) {
            int fila = rand.nextInt(9);
            int columna = rand.nextInt(9);
            int valor = rand.nextInt(9) + 1;  // Valores entre 1 y 9

            if (tablero[fila][columna] == 0 && esValido(fila, columna, valor)) {
                tablero[fila][columna] = valor;
                llenadas++;
            }
        }
    }

    // Método para insertar un valor en el tablero
    public boolean insertarValor(int fila, int columna, int valor) {
        Scanner scanner = new Scanner(System.in);

        if (fila < 0 || fila >= 9 || columna < 0 || columna >= 9 || valor < 1 || valor > 9) {
            System.out.println("Entrada inválida.");
            return false;
        }

        if (tablero[fila][columna] != 0) {
            System.out.println("La posición ya está ocupada con el valor " + tablero[fila][columna] + ". ¿Desea cambiarlo? (s/n)");
            String respuesta = scanner.next();
            if (!respuesta.equalsIgnoreCase("s")) {
                return false;
            }
        }

        if (esValido(fila, columna, valor)) {
            tablero[fila][columna] = valor;
            registrarMovimiento(fila, columna, valor);

            // Verificar si la fila está completa
            if (filaCompleta(fila)) {
                System.out.println("¡Fila " + (fila + 1) + " completada!");
            }

            // Verificar si la columna está completa
            if (columnaCompleta(columna)) {
                System.out.println("¡Columna " + (columna + 1) + " completada!");
            }

            // Verificar si el cuadro 3x3 está completo
            if (cuadroCompleto(fila, columna)) {
                System.out.println("¡Cuadro 3x3 completado!");
            }

            return true;
        }

        System.out.println("El valor no es válido.");
        return false;
    }

    // Método para verificar si el valor es válido según las reglas del Sudoku
    private boolean esValido(int fila, int columna, int valor) {
        // Verifica la fila
        for (int i = 0; i < 9; i++) {
            if (tablero[fila][i] == valor) return false;
        }
        // Verifica la columna
        for (int i = 0; i < 9; i++) {
            if (tablero[i][columna] == valor) return false;
        }
        // Verifica el cuadro 3x3
        int cuadroFila = (fila / 3) * 3;
        int cuadroColumna = (columna / 3) * 3;
        for (int i = cuadroFila; i < cuadroFila + 3; i++) {
            for (int j = cuadroColumna; j < cuadroColumna + 3; j++) {
                if (tablero[i][j] == valor) return false;
            }
        }
        return true;
    }

    // Método para registrar el movimiento
    private void registrarMovimiento(int fila, int columna, int valor) {
        registroMovimientos.append("Fila: " + (fila + 1) + ", Columna: " + (columna + 1) + ", Valor: " + valor + "\n");
    }

    // Método para guardar la partida en un archivo de texto
    public void guardarPartida(String nombreArchivo) {
        try (FileWriter writer = new FileWriter(nombreArchivo)) {
            writer.write(registroMovimientos.toString());
            System.out.println("Partida guardada en " + nombreArchivo);
        } catch (IOException e) {
            System.out.println("Error al guardar la partida.");
        }
    }

    // Método para reproducir la partida desde el archivo
    public void reproducirPartida(String nombreArchivo) {
        try (Scanner scanner = new Scanner(new File(nombreArchivo))) {
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
                Thread.sleep(1000);  // Pausa para reproducir el movimiento lentamente
            }
        } catch (IOException e) {
            System.out.println("Error al leer el archivo.");
        } catch (InterruptedException e) {
            System.out.println("Error en la reproducción.");
        }
    }

    // Método para verificar si una fila está completa
    private boolean filaCompleta(int fila) {
        boolean[] presente = new boolean[9];
        for (int i = 0; i < 9; i++) {
            int valor = tablero[fila][i];
            if (valor == 0 || presente[valor - 1]) return false;  // Si hay un 0 o un duplicado
            presente[valor - 1] = true;
        }
        return true;  // Todos los números del 1 al 9 están presentes
    }

    // Método para verificar si una columna está completa
    private boolean columnaCompleta(int columna) {
        boolean[] presente = new boolean[9];
        for (int i = 0; i < 9; i++) {
            int valor = tablero[i][columna];
            if (valor == 0 || presente[valor - 1]) return false;
            presente[valor - 1] = true;
        }
        return true;
    }

    // Método para verificar si un cuadro 3x3 está completo
    private boolean cuadroCompleto(int fila, int columna) {
        boolean[] presente = new boolean[9];
        int cuadroFila = (fila / 3) * 3;
        int cuadroColumna = (columna / 3) * 3;
        for (int i = cuadroFila; i < cuadroFila + 3; i++) {
            for (int j = cuadroColumna; j < cuadroColumna + 3; j++) {
                int valor = tablero[i][j];
                if (valor == 0 || presente[valor - 1]) return false;
                presente[valor - 1] = true;
            }
        }
        return true;
    }

    // Método para obtener los movimientos realizados
    public String obtenerMovimientos() {
        return registroMovimientos.toString();
    }

    // Método principal que incluye el menú de opciones
    public static void main(String[] args) {
        Sudoku sudoku = new Sudoku();  // Creación de un objeto Sudoku
        Scanner scanner = new Scanner(System.in);

        boolean continuar = true;

        while (continuar) {
            System.out.println("\n--- Menú de Sudoku ---");
            System.out.println("1. Jugar nueva partida");
            System.out.println("2. Insertar valor");
            System.out.println("3. Mostrar tablero");
            System.out.println("4. Guardar partida");
            System.out.println("5. Reproducir partida guardada");
            System.out.println("6. Salir");
            System.out.print("Seleccione una opción: ");
            int opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    // Iniciar nueva partida
                    sudoku = new Sudoku();  // Crear nuevo objeto Sudoku
                    sudoku.llenarTableroAleatoriamente(20);
                    System.out.println("Nueva partida iniciada.");
                    sudoku.mostrarTablero();
                    break;

                case 2:
                    // Insertar valor en el tablero
                    System.out.println("Ingrese fila, columna y valor (1-9) (o -1 para salir de la inserción): ");
                    int fila = scanner.nextInt();
                    if (fila == -1) break;
                    int columna = scanner.nextInt();
                    int valor = scanner.nextInt();
                    sudoku.insertarValor(fila - 1, columna - 1, valor);
                    break;

                case 3:
                    // Mostrar el tablero actual
                    sudoku.mostrarTablero();
                    break;

                case 4:
                    // Guardar la partida
                    System.out.println("Ingrese el nombre del archivo para guardar la partida: ");
                    String nombreArchivo = scanner.next();
                    sudoku.guardarPartida(nombreArchivo);
                    break;

                case 5:
                    // Reproducir una partida guardada
                    System.out.println("Ingrese el nombre del archivo a reproducir: ");
                    String archivo = scanner.next();
                    sudoku.reproducirPartida(archivo);
                    break;

                case 6:
                    // Salir del programa
                    System.out.println("Saliendo del juego.");
                    continuar = false;
                    break;

                default:
                    System.out.println("Opción no válida. Inténtalo de nuevo.");
                    break;
            }
        }
    }
}
