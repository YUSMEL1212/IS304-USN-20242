import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.util.Random;

public class Sudoku {
    // Clase Sudoku

    private int[][] tablero;  // Atributo no estático
    private StringBuilder registroMovimientos;  // Atributo no estático

    // Constructor para inicializar el tablero vacío
    public Sudoku() {
        tablero = new int[9][9];
        registroMovimientos = new StringBuilder();
    }

    // Método no estático para mostrar el tablero en pantalla
    public void mostrarTablero() {
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("------+-------+------");
            }
            for (int j = 0; j < 9; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                System.out.print(tablero[i][j] == 0 ? ". " : tablero[i][j] + " ");
            }
            System.out.println();
        }
    }

    // Método no estático para llenar el tablero con una cantidad aleatoria de números
    public void llenarTableroAleatoriamente(int cantidad) {
        Random rand = new Random();
        int llenadas = 0;
        while (llenadas < cantidad) {
            int fila = rand.nextInt(9);
            int columna = rand.nextInt(9);
            int valor = rand.nextInt(9) + 1;  // Valores entre 1 y 9

            if (tablero[fila][columna] == 0 && esValido(fila, columna, valor)) {
                tablero[fila][columna] = valor;
                llenadas++;
            }
        }
    }

    // Método no estático para insertar un valor en el tablero
    public boolean insertarValor(int fila, int columna, int valor) {
        Scanner scanner = new Scanner(System.in);

        if (fila < 0 || fila >= 9 || columna < 0 || columna >= 9 || valor < 1 || valor > 9) {
            System.out.println("Entrada inválida.");
            return false;
        }

        if (tablero[fila][columna] != 0) {
            System.out.println("La posición ya está ocupada con el valor " + tablero[fila][columna] + ". ¿Desea cambiarlo? (s/n)");
            String respuesta = scanner.next();
            if (!respuesta.equalsIgnoreCase("s")) {
                return false;
            }
        }

        if (esValido(fila, columna, valor)) {
            tablero[fila][columna] = valor;
            registrarMovimiento(fila, columna, valor);
            return true;
        }

        System.out.println("El valor no es válido.");
        return false;
    }

    // Método no estático para verificar si el valor es válido según las reglas del Sudoku
    private boolean esValido(int fila, int columna, int valor) {
        // Método puro (no modifica el estado del objeto)
        for (int i = 0; i < 9; i++) {
            if (tablero[fila][i] == valor) return false;
        }
        for (int i = 0; i < 9; i++) {
            if (tablero[i][columna] == valor) return false;
        }
        int cuadroFila = (fila / 3) * 3;
        int cuadroColumna = (columna / 3) * 3;
        for (int i = cuadroFila; i < cuadroFila + 3; i++) {
            for (int j = cuadroColumna; j < cuadroColumna + 3; j++) {
                if (tablero[i][j] == valor) return false;
            }
        }
        return true;
    }

    // Método no estático para registrar el movimiento
    private void registrarMovimiento(int fila, int columna, int valor) {
        registroMovimientos.append("Fila: " + (fila + 1) + ", Columna: " + (columna + 1) + ", Valor: " + valor + "\n");
    }

    // Método no estático para guardar la partida en un archivo de texto
    public void guardarPartida(String nombreArchivo) {
        try (FileWriter writer = new FileWriter(nombreArchivo)) {
            writer.write(registroMovimientos.toString());
            System.out.println("Partida guardada en " + nombreArchivo);
        } catch (IOException e) {
            System.out.println("Error al guardar la partida.");
        }
    }

    // Método no estático para reproducir la partida desde el archivo
    public void reproducirPartida(String nombreArchivo) {
        try (Scanner scanner = new Scanner(new File(nombreArchivo))) {
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
                Thread.sleep(1000);  // Pausa para reproducir el movimiento lentamente
            }
        } catch (IOException e) {
            System.out.println("Error al leer el archivo.");
        } catch (InterruptedException e) {
            System.out.println("Error en la reproducción.");
        }
    }

    // Método principal para ejecutar el programa
    public static void main(String[] args) {
        Sudoku sudoku = new Sudoku();  // Creación de un objeto Sudoku
        sudoku.llenarTableroAleatoriamente(20);
        sudoku.mostrarTablero();

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Ingrese fila, columna y valor (o -1 para salir): ");
            int fila = scanner.nextInt();
            if (fila == -1) break;
            int columna = scanner.nextInt();
            int valor = scanner.nextInt();
            sudoku.insertarValor(fila - 1, columna - 1, valor);
            sudoku.mostrarTablero();
        }

        sudoku.guardarPartida("sudoku_partida.txt");
        System.out.println("Reproduciendo partida guardada:");
        sudoku.reproducirPartida("sudoku_partida.txt");
    }
}
